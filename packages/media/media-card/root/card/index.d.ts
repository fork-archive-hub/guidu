import { Component } from 'react';
import { Identifier, Context } from '@uidu/media-core';
import { UIAnalyticsEventInterface } from '@atlaskit/analytics-next-types';
import { Subscription } from 'rxjs/Subscription';
import { CardAnalyticsContext, CardAction, CardDimensions, CardProps, CardState, CardEvent } from '../..';
export declare class Card extends Component<CardProps, CardState> {
    private hasBeenMounted;
    private onClickPayload?;
    subscription?: Subscription;
    static defaultProps: Partial<CardProps>;
    state: CardState;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: CardProps): void;
    shouldRefetchImage: (current?: CardDimensions, next?: CardDimensions) => boolean;
    componentWillUnmount(): void;
    releaseDataURI: () => void;
    private onLoadingChangeCallback;
    subscribe(identifier: Identifier, context: Context): Promise<void>;
    notifyStateChange: (state: Partial<CardState>) => void;
    unsubscribe: () => void;
    private onRetry;
    readonly analyticsContext: CardAnalyticsContext;
    readonly actions: CardAction[];
    onClick: (result: CardEvent, analyticsEvent?: UIAnalyticsEventInterface) => void;
    onInlinePlayerError: () => void;
    onInlinePlayerClick: () => void;
    renderInlinePlayer: () => JSX.Element;
    renderCard: () => JSX.Element;
    render(): JSX.Element;
    onCardInViewport: () => void;
}
